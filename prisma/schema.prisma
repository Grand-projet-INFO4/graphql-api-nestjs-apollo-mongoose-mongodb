// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  firstName        String
  lastName         String
  username         String            @unique
  photo            String?
  email            String            @unique
  phone            String            @unique
  password         String
  roles            Role[]            @default([Basic])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  driver           Driver?
  cooperativeAdmin CooperativeAdmin?

  @@fulltext([firstName(sort: Asc), lastName(sort: Asc)])
  @@map("users")
}

model Driver {
  id            String                @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  photo         String?
  license       DriverLicenseDocument
  email         String?               @unique
  phones        String[]
  hiredAt       DateTime
  latestTripAt  DateTime
  userId        String?               @unique @db.ObjectId
  user          User?                 @relation(fields: [userId], references: [id])
  cooperativeId String                @db.ObjectId
  cooperative   Cooperative           @relation(fields: [cooperativeId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  currentTripId String?               @db.ObjectId
  currentTrip   Trip?                 @relation(fields: [currentTripId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  nextTripsIds  String[]              @db.ObjectId
  nextTrips     PlannedTrip[]         @relation(fields: [nextTripsIds], references: [id])
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt

  @@unique([license.idNumber])
  @@fulltext([firstName(sort: Asc), lastName(sort: Asc)])
  @@map("drivers")
}

model CooperativeAdmin {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @unique @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  cooperativeId String      @db.ObjectId
  cooperative   Cooperative @relation(fields: [cooperativeId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("cooperativeAdmins")
}

type DriverDocument {
  id           String
  firstName    String
  lastName     String
  license      DriverLicenseDocument
  phones       String[]
  hiredAt      DateTime
  latestTripAt DateTime
  userId       String
}

model Cooperative {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  coopName     String
  slug         String             @unique
  description  String
  profilePhoto String
  coverPhoto   String?
  photos       PhotoDocument[]
  address      String
  email        String
  phones       String[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  drivers      Driver[]
  busStations  BusStation[]
  routes       Route[]
  vehicles     Vehicle[]
  trips        Trip[]
  plannedTrips PlannedTrip[]
  admin        CooperativeAdmin[]

  @@fulltext([coopName(sort: Asc), description])
  @@map("cooperatives")
}

model BusStation {
  id            String                @id @default(auto()) @map("_id") @db.ObjectId
  address       String
  locationHint  String?
  position      GeoJSONPoint
  city          CityDocument
  openHours     WeekOpenHoursDocument
  cooperativeId String                @db.ObjectId
  cooperative   Cooperative           @relation(fields: [cooperativeId], references: [id])
  parkingLotId  String?               @db.ObjectId
  parkingLot    ParkingLot?           @relation(fields: [parkingLotId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  routesIds     String[]              @db.ObjectId
  routes        Route[]               @relation(fields: [routesIds], references: [id])
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt

  @@fulltext([city.cityName(sort: Asc)])
  @@map("busStations")
}

type BusStationDocument {
  id            String
  address       String
  locationHint  String?
  position      GeoJSONPoint
  city          CityDocument
  openHours     WeekOpenHoursDocument
  cooperativeId String
  parkingLotId  String
}

model ParkingLot {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  plName      String
  slug        String          @unique
  description String
  mainPhoto   String
  photos      PhotoDocument[]
  position    GeoJSONPoint
  street      String
  city        CityDocument
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  busStations BusStation[]

  @@fulltext([plName(sort: Asc), description, street, city.cityName(sort: Asc)])
  @@map("parkingLots")
}

model Route {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  fee            Int
  approxDuration Float
  avgDuration    Float
  maxDuration    Float
  cooperativeId  String       @db.ObjectId
  cooperative    Cooperative  @relation(fields: [cooperativeId], references: [id])
  stationsIds    String[]     @db.ObjectId
  stations       BusStation[] @relation(fields: [stationsIds], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("routes")
}

type RouteDocument {
  id             String
  fee            Int
  approxDuration Float
  avgDuration    Float
  maxDuration    Float
  stations       BusStationDocument[]
  cooperativeId  String
}

model PlannedTrip {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  route           RouteDocument
  path            TripPathDocument
  reservedSeats   String[]
  currentBookings BookingDocument[]
  status          PlannedTripStatus @default(Confirmed)
  startsAt        DateTime
  vehicleId       String            @db.ObjectId
  vehicle         Vehicle           @relation(fields: [vehicleId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  bookings        Booking[]
  driversId       String[]          @db.ObjectId
  drivers         Driver[]          @relation(fields: [driversId], references: [id])
  cooperativeId   String            @db.ObjectId
  cooperative     Cooperative       @relation(fields: [cooperativeId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("plannedTrips")
}

model Trip {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  route           RouteDocument
  path            TripPathDocument
  reservedSeats   String[]
  currentVehicle  VehicleDocument
  currentDrivers  DriverDocument[]
  currentBookings BookingDocument[]
  status          TripStatus        @default(InProgress)
  startsAt        DateTime
  leftAt          DateTime?
  arrivedAt       DateTime?
  vehicleId       String            @db.ObjectId
  vehicle         Vehicle           @relation(name: "vehicle", fields: [vehicleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  driversIds      String[]          @db.ObjectId
  drivers         Driver[]
  cooperativeId   String            @db.ObjectId
  cooperative     Cooperative       @relation(fields: [cooperativeId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  bookings        Booking[]
  maybeVehicle    Vehicle?

  @@map("trips")
}

model Vehicle {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  plateId         String           @unique
  mainPhoto       String
  photos          PhotoDocument[]
  status          VehicleStatus    @default(OutOfService)
  state           VehicleState     @default(Operational)
  position        GeoJSONPoint?
  model           CarModelDocument
  rearSeatsRows   Int
  rearSeatsCols   Int
  frontSeatsCount Int
  removedSeats    String[]
  cooperativeId   String           @db.ObjectId
  cooperative     Cooperative      @relation(fields: [cooperativeId], references: [id])
  currentTripId   String?          @unique @db.ObjectId
  currentTrip     Trip?            @relation(fields: [currentTripId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nextTripsIds    String[]         @db.ObjectId
  nextTrips       PlannedTrip[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  trips           Trip[]           @relation(name: "vehicle")

  @@map("vehicles")
}

type VehicleDocument {
  id              String
  plateId         String
  state           VehicleState     @default(Operational)
  model           CarModelDocument
  rearSeatsRows   Int
  rearSeatsCols   Int
  frontSeatsCount Int
  removedSeats    String[]
  cooperativeId   String
}

model CarModel {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  modelName String
  brand     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([modelName, brand])
  @@map("carModels")
}

type CarModelDocument {
  id        String
  modelName String
  brand     String
}

model Booking {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  personName    String
  phone         String
  seats         String[]
  mode          BookingMode
  payment       PaymentType
  secretCode    String
  plannedTripId String?      @db.ObjectId
  plannedTrip   PlannedTrip? @relation(fields: [plannedTripId], references: [id])
  tripId        String?      @db.ObjectId
  trip          Trip?        @relation(fields: [tripId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@fulltext([personName(sort: Asc)])
  @@map("bookings")
}

type BookingDocument {
  id         String
  personName String
  phone      String
  seats      String[]
  mode       BookingMode
  payment    PaymentType
  secretCode String
  stationId  String
}

model City {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  cityName  String
  region    RegionDocument
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@fulltext([cityName(sort: Asc), region.regionName(sort: Asc), region.province(sort: Asc)])
  @@map("cities")
}

type CityDocument {
  id       String
  cityName String
  region   RegionDocument
}

model Region {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  regionName String
  province   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@fulltext([regionName(sort: Asc), province(sort: Asc)])
  @@map("regions")
}

type RegionDocument {
  id         String
  regionName String
  province   String
}

type DriverLicenseDocument {
  idNumber   String
  categories DriverLicenseCategory[]
}

type PhotoDocument {
  filename    String
  description String?
}

type GeoJSONPoint {
  type        String  @default("Point")
  coordinates Float[]
}

// Weekly opening hours
type WeekOpenHoursDocument {
  bulk     DayOpenHoursDocument[]
  opensAt  String?
  closesAt String?
  except   DayOpenHoursDocument[]
  daysOn   WeekDay[]
  daysOff  WeekDay[]
  tzOffset Int
}

// Opening hours for a day
type DayOpenHoursDocument {
  opensAt  String
  closesAt String
  day      WeekDay
}

// Trip booking payment details
type BookingPaymentDocument {
  amount  Int
  paidAt  DateTime
  type    PaymentType
  service String?
}

// Path: Departure and Destination cities of a trip
type TripPathDocument {
  from CityDocument
  to   CityDocument
}

// User role
enum Role {
  Basic
  Driver
  Employee
  Admin
  SuperAdmin
}

// Driver licence category
enum DriverLicenseCategory {
  A
  B
  C
  D
  E
}

// The short form of the days of the week
enum WeekDay {
  Sun
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
}

// Mode of booking of a trip
enum BookingMode {
  InPerson
  Online
}

// Type of payment
enum PaymentType {
  Cash
  Online
}

// Planned trip's statuses
enum PlannedTripStatus {
  Confirmed
  Pending
  Cancelled
}

// Ongoing trip's statuses
enum TripStatus {
  InProgress
  Interrupted
  Cancelled
}

// Statuses of a cooperative's vehicle
enum VehicleStatus {
  InService
  OutOfService
}

// States of a cooperative's vehicle
enum VehicleState {
  Operational
  BrokenDown
  Crashed
  Damaged
  Repaired
}
